


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ; OSasm.s: low-level OS commands, written in assembly   
                                           */
    3 00000000         ; Runs on LM4F120/TM4C123/MSP432
    4 00000000         ; Lab 2 starter file
    5 00000000         ; February 10, 2016
    6 00000000         ;
    7 00000000         
    8 00000000         
    9 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   10 00000000                 THUMB
   11 00000000                 REQUIRE8
   12 00000000                 PRESERVE8
   13 00000000         
   14 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   15 00000000                 EXPORT           StartOS
   16 00000000                 EXPORT           SysTick_Handler
   17 00000000                 IMPORT           Scheduler
   18 00000000         
   19 00000000         
   20 00000000         SysTick_Handler                      ; 1) Saves R0-R3,R1
                                                            2,LR,PC,PSR
   21 00000000 B672            CPSID            I           ; 2) Prevent interr
                                                            upt during switch
   22 00000002         ; PUSH {R4-R11}     ; 3) Saving R4 to R11 into stack
   23 00000002         ; LDR  R0, =RunPT     ; 4) R0 now points to run pointer
   24 00000002         ; LDR  R1, [R0]     ; R1 = RunPt
   25 00000002         ; STR     SP, [R1]           ; 5) Save stack pointer int
                       o TCB
   26 00000002         ;    LDR     R1, [R1,#4]        ; 6) R1 = RunPt->next su
                       mming 4
   27 00000002         ;    STR     R1, [R0]           ;    RunPt = R1
   28 00000002         ;    LDR     SP, [R1]           ; 7) SP = RunPt->sp;
   29 00000002         ;    POP     {R4-R11}           ; 8) restore registers r
                       4 to r11
   30 00000002         ;    CPSIE   I                  ; 9) tasks run with inte
                       rrupts enabled
   31 00000002 4770            BX               LR          ; 10) restore R0-R3
                                                            ,R12,LR,PC,PSR
   32 00000004         
   33 00000004         StartOS
   34 00000004         
   35 00000004 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   36 00000006         ; LDR     R0, =RunPt         ; initiate currently runnin
                       g thread
   37 00000006         ;    LDR     R2, [R0]           ; R2 receives the value 
                       of RunPt
   38 00000006         ;    LDR     SP, [R2]           ; new thread SP; SP = Ru
                       nPt->stackPointer;
   39 00000006         ;    POP     {R4-R11}           ; restore registers r4 t
                       o r11
   40 00000006         ;    POP     {R0-R3}            ; restore registers r0 t
                       o r3
   41 00000006         ;    POP     {R12}



ARM Macro Assembler    Page 2 


   42 00000006         ;    ADD     SP,SP,#4           ; discard LR from initia
                       l stack
   43 00000006         ;    POP     {LR}               ; start location
   44 00000006         ;    ADD     SP,SP,#4           ; discard PSR
   45 00000006 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   46 00000008 4770            BX               LR          ; start first threa
                                                            d
   47 0000000A         
   48 0000000A 00 00           ALIGN
   49 0000000C                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\objects\osasm.d -o.\objects\osasm.o -I.\RTE\_Target -IC:\Keil_v5
\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DF
P\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISI
ON_VERSION SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 
1" --list=.\listings\osasm.lst osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 9 in file osasm.s
   Uses
      None
Comment: .text unused
StartOS 00000004

Symbol: StartOS
   Definitions
      At line 33 in file osasm.s
   Uses
      At line 15 in file osasm.s
Comment: StartOS used once
SysTick_Handler 00000000

Symbol: SysTick_Handler
   Definitions
      At line 20 in file osasm.s
   Uses
      At line 16 in file osasm.s
Comment: SysTick_Handler used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RunPt 00000000

Symbol: RunPt
   Definitions
      At line 14 in file osasm.s
   Uses
      None
Comment: RunPt unused
Scheduler 00000000

Symbol: Scheduler
   Definitions
      At line 17 in file osasm.s
   Uses
      None
Comment: Scheduler unused
2 symbols
339 symbols in table
